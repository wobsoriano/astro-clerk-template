diff --git a/dist/index.js b/dist/index.js
index ea65fa6e50c26e32f0def7adfb5889af9d921d00..0ac55c1df1c855562ddca359b00b7991125a60df 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -60,6 +60,7 @@ function createIntegration() {
           if (typeof clerkJSVariant !== "undefined" && clerkJSVariant !== "headless" && clerkJSVariant !== "") {
             logger.error('Invalid value for clerkJSVariant. Acceptable values are `"headless"`, `""`, and `undefined`');
           }
+          
           const internalParams = {
             ...params,
             sdkMetadata: {
@@ -112,6 +113,17 @@ function createIntegration() {
             ${command === "dev" ? `console.log("${name}","Initialize Clerk: page")` : ""}
             import { runInjectionScript, swapDocument } from "${buildImportPath}";
 
+            // Remove param and update URL
+            function removeClerkQueryParam(param) {
+              const url = new URL(window.location.href);
+              if (url.searchParams.has(param)) {
+                url.searchParams.delete(param);
+                window.history.replaceState(window.history.state, '', url);
+              }
+            }
+
+            removeClerkQueryParam('__netlify_clerk_cache_bust');
+
             // Taken from https://github.com/withastro/astro/blob/e10b03e88c22592fbb42d7245b65c4f486ab736d/packages/astro/src/transitions/router.ts#L39.
             // Importing it directly from astro:transitions/client breaks custom client-side routing
             // even when View Transitions is disabled.
diff --git a/dist/server/index.js b/dist/server/index.js
index f65760365c60f46a00bb0949ff8fbaf0e14536db..6c07cfbcfcc1e8d52ac618e5d8af8c640ad44aff 100644
--- a/dist/server/index.js
+++ b/dist/server/index.js
@@ -3,7 +3,7 @@ import { verifyToken, createClerkClient as createClerkClient2 } from "@clerk/bac
 
 // src/server/clerk-middleware.ts
 import { AuthStatus as AuthStatus2, constants as constants3, createClerkRequest, createRedirect } from "@clerk/backend/internal";
-import { isDevelopmentFromSecretKey as isDevelopmentFromSecretKey2 } from "@clerk/shared/keys";
+import { isDevelopmentFromPublishableKey, isDevelopmentFromSecretKey as isDevelopmentFromSecretKey2 } from "@clerk/shared/keys";
 import { isHttpOrHttps } from "@clerk/shared/proxy";
 import { eventMethodCalled } from "@clerk/shared/telemetry";
 import { handleValueOrFn } from "@clerk/shared/utils";
@@ -177,6 +177,17 @@ var serverRedirectWithAuth = (context, clerkRequest, res, opts) => {
   return res;
 };
 
+function handleNetlifyCacheInDevInstance(locationHeader, requestState) {
+  if (import.meta.env.NETLIFY && isDevelopmentFromPublishableKey(requestState.publishableKey)) {
+    const hasHandshakeQueryParam = locationHeader.includes('__clerk_handshake');
+    if (!hasHandshakeQueryParam) {
+      const url = new URL(locationHeader);
+      url.searchParams.append('__netlify_clerk_cache_bust', Date.now().toString());
+      requestState.headers.set('Location', url.toString());
+    }
+  }
+}
+
 // src/server/clerk-middleware.ts
 var CONTROL_FLOW_ERROR = {
   REDIRECT_TO_SIGN_IN: "CLERK_PROTECT_REDIRECT_TO_SIGN_IN"
@@ -199,8 +210,11 @@ var clerkMiddleware = (...args) => {
       clerkRequest,
       createAuthenticateRequestOptions(clerkRequest, options, context)
     );
+
     const locationHeader = requestState.headers.get(constants3.Headers.Location);
     if (locationHeader) {
+      handleNetlifyCacheInDevInstance(locationHeader, requestState);
+
       const res = new Response(null, { status: 307, headers: requestState.headers });
       return decorateResponseWithObservabilityHeaders(res, requestState);
     } else if (requestState.status === AuthStatus2.Handshake) {
